package main

import (
	"errors"
	"html/template"
	"io/ioutil"
	"net/http"
	"regexp"
)

type Page struct {
	Title string
	Body  []byte // means "a byte slice"; expected type for io libraries
}

var templates = template.Must(template.ParseFiles("tmpl/edit.html", "tmpl/view.html"))

var validPath = regexp.MustCompile("^/(edit|save|view)/([a-zA-Z0-9]+)$")

func getTitle(w http.ResponseWriter, r *http.Request) (string, error) {
	m := validPath.FindStringSubmatch(r.URL.Path)
	if m == nil {
		http.NotFound(w, r)
		return "", errors.New("Invalid Page Title")
	}
	return m[2], nil // The title is the second subexpression
}

// A function that takes a function as a parameter
// This is an example of the use of function literals (abstracting of functionality)
func makeHandler(fn func(http.ResponseWriter, *http.Request, string)) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// Extract the page title from the Request
		m := validPath.FindStringSubmatch(r.URL.Path)
		if m == nil {
			http.NotFound(w, r)
			return
		}
		// Call the provider handler 'fn'
		fn(w, r, m[2])
	}
}

func (p *Page) save() error {
	filename := "data/" + p.Title + ".txt"
	return ioutil.WriteFile(filename, p.Body, 0600)
}

func loadPage(title string) (*Page, error) {
	filename := "data/" + title + ".txt"
	body, err := ioutil.ReadFile(filename)
	if err != nil {
		return nil, err
	}
	return &Page{Title: title, Body: body}, nil
}

// The http.Redirect function adds an HTTP status code of http.StatusFound (302)
// and a Location header to the HTTP response
func viewHandler(w http.ResponseWriter, r *http.Request, title string) {
	p, err := loadPage(title)
	if err != nil {
		http.Redirect(w, r, "/edit/"+title, http.StatusFound)
		return
	}
	renderTemplate(w, "view", p)
}

// The html/template package helps guarantee the only safe and correct-looking
// HTML is generated by template actions (t.Execute)
// It automatically escapes any greater than sign (>) replacing it wit &gt to
// make sure user data does not corrupt the form HTML
func editHandler(w http.ResponseWriter, r *http.Request, title string) {
	p, err := loadPage(title)
	if err != nil {
		p = &Page{Title: title}
	}
	renderTemplate(w, "edit", p)
}

/*
  FormValue returns string, so it has to be converted to a slice of bytes
	It can be done by "simple" casting []byte(body)
*/
func saveHandler(w http.ResponseWriter, r *http.Request, title string) {
	body := r.FormValue("body")
	p := &Page{Title: title, Body: []byte(body)}
	err := p.save()
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	http.Redirect(w, r, "/view/"+title, http.StatusFound)
}

// Doing some refactoring of the code and replacing the repetitions
// It pays of for the error handling
func renderTemplate(w http.ResponseWriter, tmpl string, p *Page) {
	err := templates.ExecuteTemplate(w, tmpl+".html", p)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
	}
}

/*
  * http.HandleFunc tells the http package to handle all requests to the web root
	("/") with handler function
	* http.ListenAndServe specifies that server should listen on port 8585 on any
	interface (second parameter?); function blocks until the program is terminated
	handler is of the type http.HandlerFunc
	* http.ResponseWriter - by writing to this instance, we send data to the HTTP
	client
	* http.Request - data structure that represents the client HTTP request
	* r.URL.Path - path component of the request URL (trailing [1:] means create
  a sub-slice of Path from the 1st character to the end to drop leading "/")
	* http://localhost:8080/monkeys

*/
func main() {
	http.HandleFunc("/view/", makeHandler(viewHandler))
	http.HandleFunc("/edit/", makeHandler(editHandler))
	http.HandleFunc("/save/", makeHandler(saveHandler))
	http.ListenAndServe(":8585", nil)
}
